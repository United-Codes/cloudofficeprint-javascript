"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
// Install cloudofficeprint using npm install cloudofficeprint 
var cop = require("cloudofficeprint");
var fs = require("fs");
// Main object that holds the data
var collection = new cop.elements.ElementCollection();
//-------------style Property-----------//
//color
var style = new cop.elements.CellStyleDocx('#eb4034', 10);
var styleProperty = new cop.elements.CellStyleProperty('testProperty', 'some value', style);
collection.add(styleProperty);
//--------------autoLink--------------//
var autoLink = new cop.elements.AutoLink('autoLink', 'AutoLink including hyperlinks like https://www.cloudofficeprint.com and other mail like info@cloudofficeprint.com and text combined');
collection.add(autoLink);
//------------HyperLink------------//
var hyperlink = new cop.elements.Hyperlink('linkToCOP', 'https://www.cloudofficeprint.com');
collection.add(hyperlink);
//--------------styled Property--------------//
var styledProp = new cop.elements.StyledProperty('cust_first_name', 'DemoCustomerName', 'NanumMyeongjo', '25pt', '#ff00ff');
collection.add(styledProp);
//------------------WaterMark--------------//
var watermark = new cop.elements.Watermark('wm_name', 'test Watemark');
collection.add(watermark);
//--------------tbox-----------------------//
//{tbox textBox} is only supported in excel for now.
//----------------------d3 chart-------//
//sample json_encoded_data
var d3_json_encoded_code = "  \n    // set the dimensions and margins of the graph  \n    const width = 1800;  \n    const height = 900;  \n    const margin = 10;  \n    const radius = Math.min(width, height) / 2 - margin;  \n\n    const d3 = require(\"d3\");  \n    const D3Node = require(\"d3-node\");  \n    const d3n = new D3Node();  \n    const svg = d3n.createSVG(width, height)  \n        .append(\"g\")  \n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");  \n    \n    let data_transformed = {};  \n    data.forEach(d => {data_transformed[d.x] = {\"y\": d.y, \"v\": d.z}});  \n    \n    // set the color scale  \n    var color = d3.scaleOrdinal()  \n        .domain(Object.keys(data_transformed))  \n        .range([\"#427d93\", \"#4c835b\", \"#89733e\", \"#ca4d3b\", \"#846a91\", \"#4f7d7b\", \"#aa643b\", \"#a26472\", \"#587a86\", \"#5e7d4f\", \"#c04f4f\"]);  \n\n    // Compute the position of each group on the pie:  \n    var pie = d3.pie()  \n        .sort(null) // Do not sort group by size  \n        .value(function(d) {return d.value.y; })  \n        .startAngle(-Math.PI/8)  \n        .endAngle(15 * Math.PI / 8)  \n        ;  \n    \n    var data_ready = pie(d3.entries(data_transformed));  \n    // The arc generator  \n    var arc = d3.arc()  \n        .innerRadius(radius * 0.35)         // This is the size of the donut hole  \n        .outerRadius(radius * 0.8)  \n        ;  \n    // Another arc that wont be drawn. Just for labels positioning  \n    var outerArc = d3.arc()  \n        .innerRadius(radius * 0.9)  \n        .outerRadius(radius * 0.9)  \n        ;  \n    // Another arc that wont be drawn. Just for labels positioning  \n    var outerArc2 = d3.arc()  \n        .innerRadius(radius * 0.8)  \n        .outerRadius(radius * 0.8)  \n        ;  \n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.  \n    svg.selectAll(\"allSlices\")  \n        .data(data_ready)  \n        .enter()\n        .append(\"path\")  \n        .attr(\"d\", arc)  \n        .attr(\"fill\", function(d){ return(color(d.data.key)) })  \n        .attr(\"stroke\", \"white\")  \n        .style(\"stroke-width\", \"2px\") \n        //.style(\"opacity\", 0.7)  \n        ;  \n    \n    // Add the polylines between chart and labels:  \n    svg.selectAll(\"allPolylines\")  \n        .data(data_ready)  \n        .enter()  \n        .append(\"polyline\")  \n            .attr(\"stroke\", \"#888\")  \n            .style(\"fill\", \"none\")  \n            .attr(\"stroke-width\", 1)  \n            .attr(\"points\", function(d) {  \n                if(d.endAngle - d.startAngle<4*Math.PI/180){return []}\n            var posA = outerArc2.centroid(d) // line insertion in the slice  \n            var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that  \n            var posC = outerArc.centroid(d); // Label position = almost the same as posB  \n            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left  \n            posC[0] = radius * 0.95 * (midangle % (2 * Math.PI) < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left  \n            return [posA, posB, posC]  \n            });  \n    \n    // Add labels:  \n    svg.selectAll(\"allLabels\")  \n        .data(data_ready)  \n        .enter()  \n        .append(\"text\")  \n            .attr(\"font-family\", \"Oracle Sans\")  \n            .attr(\"font-size\", \"24px\")  \n            .text( function(d) { \n                if(d.endAngle - d.startAngle<4*Math.PI/180){return \"\"}\n                return d.data.key } )  \n            .attr(\"transform\", function(d) {  \n                var pos = outerArc.centroid(d);  \n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2  \n                pos[0] = radius * 0.99 * (midangle % (2 * Math.PI) < Math.PI ? 1 : -1);  \n                return \"translate(\" + pos + \")\";  \n            })  \n            .style(\"text-anchor\", function(d) {  \n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2  \n                return (midangle % (2 * Math.PI) < Math.PI ? \"start\" : \"end\")  \n            });  \n\n    // Add values:  \n    svg.selectAll(\"allValues\")  \n        .data(data_ready)  \n        .enter()  \n        .append(\"text\")  \n            .attr(\"font-family\", \"Oracle Sans\")  \n            .attr(\"font-size\", \"24px\")  \n            .attr(\"fill\", \"#fff\")\n            .text( function(d) { \n                if(d.endAngle - d.startAngle<8*Math.PI/180){return \"\"}\n                return d.data.value.v } )  \n            .attr(\"transform\", function(d) {  \n                var pos = arc.centroid(d);  \n                pos[0] -= 6 * d.data.value.v.length;\n                pos[1] += 12\n                return \"translate(\" + pos + \")\";  \n            })\n            ;\n    return d3n;  \n    fail(new Error(\"We are missing something!\"));\n        ";
var data = [
    {
        "x": "CPQ Commerce",
        "y": 2036277,
        "z": "$2.04M"
    },
    {
        "x": "Fusion ERPM",
        "y": 1088007,
        "z": "$1.09M"
    },
    {
        "x": "SaaS - Health Science Applications",
        "y": 22537,
        "z": "$22.5K"
    }
];
var d3 = new cop.elements.D3Code('d3_code', //name
d3_json_encoded_code, //json encoded code
data);
collection.add(d3);
//-----------------Insert Document------------//
var base64EncodedDoc = "";
var insertDocument = new cop.elements.Insert('document_to_insert', base64EncodedDoc);
collection.add(insertDocument);
//----------------------------------------------//
// Add server
// If you are using onpremise-version do not need to specify YOUR_API_KEY else replace it with your api key.
var server = new cop.config.Server("http://localhost:8010/", new cop.config.ServerConfig("YOUR_API_KEY"));
// Create printjob
var printjob = new cop.PrintJob(collection, server, cop.Resource.fromLocalFile('./data/docxElements_template.docx'));
fs.writeFileSync('./printjob.json', JSON.stringify(printjob.asDict()));
// Asynchronously execute print job and save response to file
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var response, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                return [4 /*yield*/, printjob.execute()];
            case 1:
                response = _a.sent();
                return [4 /*yield*/, response.toFile('./output/output_docxElements')];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                err_1 = _a.sent();
                console.log(err_1);
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); })();
